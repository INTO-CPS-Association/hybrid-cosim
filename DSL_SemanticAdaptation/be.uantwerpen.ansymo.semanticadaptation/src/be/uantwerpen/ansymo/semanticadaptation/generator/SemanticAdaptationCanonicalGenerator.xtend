/*
 * generated by Xtext 2.10.0
 */
package be.uantwerpen.ansymo.semanticadaptation.generator

import be.uantwerpen.ansymo.semanticadaptation.semanticAdaptation.Adaptation
import be.uantwerpen.ansymo.semanticadaptation.semanticAdaptation.SemanticAdaptation
import java.io.ByteArrayOutputStream
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SemanticAdaptationCanonicalGenerator extends AbstractGenerator {
	
	String CANONICAL_EXT = ".BASE.sa"
	String NAME_SUFFIX = "_BASE"
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		println("Generating canonical semantic adaptation for file " + resource.URI.toFileString() + "...")
		
		println("Resource URI information:")
		println("\t resource.URI.lastSegment = " + resource.URI.lastSegment())
		println("\t resource.URI.trimFileExtension = " + resource.URI.trimFileExtension())
		
		println("______________________________File Read______________________________")
		var outputByteArray = new ByteArrayOutputStream()
		resource.save(outputByteArray, null)
		println(outputByteArray.toString())
		outputByteArray.close()
		println("__________________________________________________________________________")
		
		// Create file name for the canonical sa file
		var fileNameWithoutExt = resource.URI.trimFileExtension().lastSegment()
		var canonicalFileName = fileNameWithoutExt + CANONICAL_EXT
		println("canonicalFileName = " + canonicalFileName)
		
		// Create in memory representation of canonical SA file
		var adaptations = resource.allContents.toIterable.filter(SemanticAdaptation).last.elements.filter(Adaptation);
		if (adaptations.size > 1){
			throw new Exception("Only one semantic adaptation is supported per .sa file")
		}
		var adaptation = adaptations.head
		
		println("Checking if file is already a canonical version...")
		if (adaptation.name.indexOf(NAME_SUFFIX) == -1){
			println("It is not.")
			
			adaptation.name = adaptation.name + NAME_SUFFIX
			
			adaptation.canonicalize
						
			outputByteArray = new ByteArrayOutputStream()
			adaptation.eResource.save(outputByteArray,null)
			
			println("______________________________Generated file______________________________")
			println(outputByteArray.toString())
			println("__________________________________________________________________________")
			
			fsa.generateFile(canonicalFileName, outputByteArray.toString())
			println("File " + canonicalFileName + " written.")
			outputByteArray.close()
			
			println("Generating canonical semantic adaptation for file " + resource.URI + "... DONE.")
			
		} else {
			println("It is already a canonical version.")
			println("Nothing to do.")
		}

	}
	
	def canonicalize(Adaptation sa){
		
	}
}
