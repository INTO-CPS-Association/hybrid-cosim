import PowerWindowModel

module Window_SA

semantic adaptation mealy reactive window_sa

for fmu window

input ports 	reaction_force,
				displacement,
				speed;

output ports	disp;
				tau;

in var 	stored_windowsa_reaction_force,
		stored_windowsa_displacement,
		stored_windowsa_speed;

in rules {
	true -> {
		if (is_set(window_sa.reaction_force))
			stored_windowsa_reaction_force := window_sa.reaction_force;
	} --> {
		window.reaction_force := stored_windowsa_reaction_force;
	};
    true -> {
		if (is_set(window_sa.displacement))
			stored_windowsa_displacement := window_sa.displacement;
	} --> {
		window.displacement := stored_windowsa_displacement; 
	};
    true -> {
		if (is_set(window_sa.speed))
			stored_windowsa_speed := window_sa.speed;
	} --> {
		t, H, dt = t - ext_t. // Bart suggestion: i that counts the number of micro steps.
		window.speed := stored_windowsa_speed;
	};
}

    /*
    In the paper, make a table with all the variables and scopes in the base language.
    */
    
control rules {
	do_step(window, t, H); // includes update_in rules and update_out (update-in rules do not update state)
}

/*
Question to be addressed:
	If original fmu has port a, and there is a declaration in the semantic adaptation like "out ports a", should this mean a -> a, or should it just mean that the adapted FMU has a port called a.
	If the original fmu has no port called "a", then the declaration "out ports a" means that there will be a port called a. 
	
fmu window
in ports reaction_force, displacement, speed
out ports height, reaction_torque, a, b, c, d,...

input ports reaction_force,	displacement, speed
out ports height (m) -> disp (cm), reaction_torque -> tau, window.a, window.*
out rules {
	true -> { } --> { 
	x := x*y;
	windowsa.b := 6;
	}; 
}
*/

out var stored_window_reaction_torque,
		stored_window_height;

out rules {
	true -> {
		stored_window_reaction_torque := window.reaction_torque;
		stored_window_height := window.height;
		stored_x := window.x;
		stored_y := window.y;
	} --> {
		window_sa.tau := - stored_window_reaction_torque;
		window_sa.disp := stored_window_height * 100;
		window_sa.y := stored_y;
		window_sa.x := stored_y*stored_x;
	};
}
